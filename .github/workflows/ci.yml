name: Continuous Integration

on: [push, pull_request]

jobs:
  full:
    name: Build, Test, Check formating, Check lints

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download Discord Game SDK
        shell: bash
        working-directory: ${{ runner.temp }}
        run: |
          curl -sO https://dl-game-sdk.discordapp.net/latest/discord_game_sdk.zip
          unzip ./discord_game_sdk.zip

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
        env:
          DISCORD_GAME_SDK_PATH: ${{ runner.temp }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          DISCORD_GAME_SDK_PATH: ${{ runner.temp }}

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
        env:
          DISCORD_GAME_SDK_PATH: ${{ runner.temp }}

      - name: Check lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
        env:
          DISCORD_GAME_SDK_PATH: ${{ runner.temp }}

  partial:
    name: Build, Test

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          # - macos-latest
          - windows-latest
        rust:
          - stable

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download Discord Game SDK
        shell: bash
        working-directory: ${{ runner.temp }}
        run: |
          curl -sO https://dl-game-sdk.discordapp.net/latest/discord_game_sdk.zip
          unzip ./discord_game_sdk.zip

      - name: Cache LLVM installation
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache@v1
        with:
          path: 'C:\Program Files\LLVM'
          key: chocolatey-llvm

      - name: Install LLVM
        if: startsWith(matrix.os, 'windows')
        run: |
          choco install llvm -y
          refreshenv

      - name: Set LIBCLANG_PATH
        if: startsWith(matrix.os, 'windows')
        run: |
          echo '::set-env name=LIBCLANG_PATH::C:\Program Files\LLVM\bin'

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
        env:
          DISCORD_GAME_SDK_PATH: ${{ runner.temp }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          DISCORD_GAME_SDK_PATH: ${{ runner.temp }}
