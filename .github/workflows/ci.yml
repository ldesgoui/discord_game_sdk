name: Continuous Integration

on: [push, pull_request]

jobs:
  build-test:
    name: Build, test

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - stable
          - nightly
          - 1.37.0

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download Discord Game SDK
        working-directory: ${{ runner.temp }}
        run: |
          curl -sO https://dl-game-sdk.discordapp.net/latest/discord_game_sdk.zip
          unzip ./discord_game_sdk.zip
          cp lib/x86_64/discord_game_sdk.so         lib/x86_64/libdiscord_game_sdk.so
          cp lib/x86_64/discord_game_sdk.dylib      lib/x86_64/libdiscord_game_sdk.dylib
          cp lib/x86_64/discord_game_sdk.dll.lib    lib/x86_64/discord_game_sdk.lib
          cp lib/x86/discord_game_sdk.dll.lib       lib/x86/discord_game_sdk.lib

      - name: Set DYLD_LIBRARY_PATH
        working-directory: ${{ runner.temp }}
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "::set-env name=DYLD_LIBRARY_PATH::$DYLD_LIBRARY_PATH:$PWD/lib/x86_64"

      - name: Cache libclang
        id: cache-libclang
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache@v1
        with:
          path: 'C:\just-libclang'
          key: windows-libclang

      - name: Install LLVM
        if: startsWith(matrix.os, 'windows') && steps.cache-libclang.outputs.cache-hit != 'true'
        run: |
          choco install llvm -r -y
          mkdir 'C:\just-libclang'
          cp 'C:\Program Files\LLVM\bin\libclang.dll' 'C:\just-libclang'

      - name: Set LIBCLANG_PATH
        if: startsWith(matrix.os, 'windows')
        run: |
          echo '::set-env name=LIBCLANG_PATH::C:\just-libclang'

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all --examples --tests
        env:
          DISCORD_GAME_SDK_PATH: ${{ runner.temp }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          DISCORD_GAME_SDK_PATH: ${{ runner.temp }}

  fmt-lint:
    name: Check format, lints

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        rust:
          - nightly
          - stable
          - 1.37.0

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Check lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features doc -- -D warnings
